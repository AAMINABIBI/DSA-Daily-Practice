88. Merge Sorted Array

class Solution {
public:
    void merge(vector<int> &nums1, int m, vector<int> &nums2, int n)
{
vector<int> nums3;
for(int i=0;i<m;i++)
{
    nums3.push_back(nums1[i]);

}
for(int j=0;j<n;j++)
{
    nums3.push_back(nums2[j]);
}

sort(nums3.begin(),nums3.end());
nums1=nums3;
   /* 
   Approach # 2
   int i = n + m - 1, j = m - 1, k = n - 1;
    while(j >= 0 || k >= 0) {
        if(j >= 0 && (k < 0 || nums1[j] >= nums2[k])) nums1[i--] = nums1[j--];
        if(k >= 0 && (j < 0 || nums1[j] < nums2[k])) nums1[i--] = nums2[k--];
    }*/
}
};



1. Two Sum

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        for(int i=0;i<nums.size();i++)
        {
            for(int j=i+1;j<nums.size();j++)
            {
               int sum= nums[i]+nums[j];
               if(sum==target)
               {
                    return {i, j};
               }
            }
        }  return {};
    }
};
